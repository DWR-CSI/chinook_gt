process.executor = 'azurebatch'
docker.enabled = true
workDir = 'az://nextflow/work'
params {

    outdir = 'az://nextflow/results'
    adapter_file = 'az://nextflow/reference/adapters/GTseq-PE.fa' 
    reference = 'az://nextflow/reference/transition_panel/full_panel.fasta'
}


azure {
    batch {
        // ... other settings ...
        autoPoolMode = false
        allowPoolCreation = true
        runOptions = '-e "HOME=${HOME}" -v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro'
        deletePoolsOnCompletion = false
        pools {
            small {
                vmType = "Standard_D2pls_v5"
                autoScale = true
                maxVmCount = 20
                scaleFormula = '''
                startingNumberOfVMs = 1;
                maxNumberofVMs = 20;
                pendingTaskSamplePercent = $PendingTasks.GetSamplePercent(300 * TimeInterval_Second);
                pendingTaskSamples = pendingTaskSamplePercent < 70 ? startingNumberOfVMs : avg($PendingTasks.GetSample(300 * TimeInterval_Second));
                $TargetDedicatedNodes = min(maxNumberofVMs, pendingTaskSamples);
                $NodeDeallocationOption = taskcompletion;
                '''
            }
            medium {
                vmType = 'Standard_D4s_v5'
                autoScale = true
                maxVmCount = 10
                scaleFormula = '''
                startingNumberOfVMs = 1;
                maxNumberofVMs = 10;
                pendingTaskSamplePercent = $PendingTasks.GetSamplePercent(300 * TimeInterval_Second);
                pendingTaskSamples = pendingTaskSamplePercent < 70 ? startingNumberOfVMs : avg($PendingTasks.GetSample(300 * TimeInterval_Second));
                $TargetDedicatedNodes = min(maxNumberofVMs, pendingTaskSamples);
                $NodeDeallocationOption = taskcompletion;
                '''
            }
            high_memory {
                vmType = 'Standard_E4pds_v5'
                autoScale = true
                maxVmCount = 4
                scaleFormula = '''
                startingNumberOfVMs = 1;
                maxNumberofVMs = 4;
                pendingTaskSamplePercent = $PendingTasks.GetSamplePercent(300 * TimeInterval_Second);
                pendingTaskSamples = pendingTaskSamplePercent < 70 ? startingNumberOfVMs : avg($PendingTasks.GetSample(300 * TimeInterval_Second));
                $TargetDedicatedNodes = min(maxNumberofVMs, pendingTaskSamples);
                $NodeDeallocationOption = taskcompletion;
                '''
            }
        }
    }
}

process {
    withLabel: process_medium {
        pool = 'medium'
        cpus = 2
        memory = '8 GB'
    }
        withLabel: process_high {
        pool = 'medium'
        cpus = 4
        memory = '16 GB'
    }
        withLabel: process_low {
        pool = 'small'
        cpus = 2
        memory = '4 GB'
    }
        withLabel: 'high_memory' {
        pool = 'high_memory'
        }
}
